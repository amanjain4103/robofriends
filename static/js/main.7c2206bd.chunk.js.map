{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","Users.js","SearchBox.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","src","id","alt","name","email","CardList","Users","map","userx","i","key","SearchBox","SearchChange","type","placeholder","onChange","App","onSearchChange","event","setState","SearchItem","target","value","state","robots","filterRobo","this","filter","robo","toLowerCase","trim","includes","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kCCCSC,G,MAdF,SAACC,GACV,OACI,6BACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,UAAUC,IAAG,+BAA0BF,EAAMG,GAAhC,YAA8CC,IAAI,oBAC9E,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,YCQfC,EAhBC,SAAC,GAAW,IAAVC,EAAS,EAATA,MACd,OACI,yBAAKP,UAAU,iBAEPO,EAAMC,KAAI,SAACC,EAAMC,GACb,OAAO,kBAAC,EAAD,CAAMC,IAAKJ,EAAMG,GAAGR,GAAIE,KAAMG,EAAMG,GAAGN,KAAMC,MAAOE,EAAMG,GAAGL,MAAOH,GAAIK,EAAMG,GAAGR,UCT/FK,EAAQ,CACjB,CACIL,GAAG,EACHE,KAAK,YACLC,MAAM,sBAEV,CACIH,GAAG,EACHE,KAAK,aACLC,MAAM,uBAEV,CACIH,GAAG,EACHE,KAAK,aACLC,MAAM,wBAEV,CACIH,GAAG,EACHE,KAAK,aACLC,MAAM,uBAEV,CACIH,GAAG,EACHE,KAAK,cACLC,MAAM,wBAEV,CACIH,GAAG,EACHE,KAAK,YACLC,MAAM,sBAEV,CACIH,GAAG,EACHE,KAAK,cACLC,MAAM,wBAEV,CACIH,GAAG,EACHE,KAAK,YACLC,MAAM,uBAEV,CACIH,GAAG,EACHE,KAAK,YACLC,MAAM,sBAEV,CACIH,GAAG,GACHE,KAAK,eACLC,MAAM,yBAEV,CACIH,GAAG,GACHE,KAAK,aACLC,MAAM,uBAEV,CACIH,GAAG,GACHE,KAAK,YACLC,MAAM,sBAEV,CACIH,GAAG,GACHE,KAAK,aACLC,MAAM,uBAEV,CACIH,GAAG,GACHE,KAAK,eACLC,MAAM,yBAEV,CACIH,GAAG,GACHE,KAAK,UACLC,MAAM,sBC1DCO,G,MAbG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aAChB,OACI,6BACI,2BACAb,UAAU,SACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCyBPI,G,wDA3BX,aAAc,IAAD,8BACT,gBAMJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,WAAWF,EAAMG,OAAOC,SANxC,EAAKC,MAAO,CACRC,OAAOlB,EACPc,WAAW,IAJN,E,qDAWJ,IAAD,OACEK,EAAaC,KAAKH,MAAMC,OAAOG,QAAO,SAAAC,GACxC,OAAOA,EAAKzB,KAAK0B,cAAcC,OAAOC,SAAS,EAAKR,MAAMH,WAAWS,cAAcC,WAGvF,OACI,yBAAK/B,UAAU,aACX,2CACA,kBAAC,EAAD,CAAWa,aAAcc,KAAKT,iBAC9B,kBAAC,EAAD,CAAUX,MAAOmB,S,GAtBfO,IAAMC,YCMxBC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SNqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7c2206bd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React  from 'react';\r\n// import 'tachyons';\r\nimport './Card.css';\r\n\r\n\r\nconst Card = (props)=>{\r\n    return (\r\n        <div>\r\n            <div className=\"cardStyle\">\r\n                <img className=\"CardImg\" src={`https://robohash.org/${props.id}?100*100`} alt=\"this is a robot\"/>\r\n                <div>\r\n                    <h2>{props.name}</h2>\r\n                    <p>{props.email}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n// import {Users} from './Users';\r\n\r\nconst CardList =({Users})=>{\r\n    return (\r\n        <div className=\"cardContainer\">\r\n            {\r\n                Users.map((userx,i)=>{\r\n                    return <Card key={Users[i].id} name={Users[i].name} email={Users[i].email} id={Users[i].id}/> \r\n                })\r\n            }\r\n\r\n\r\n            {/* <Card name={Users[0].name} email={Users[0].email}/> */}\r\n            {/* <Card name={Users[1].name} email={Users[1].email}/> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","export const Users = [\r\n    {\r\n        id:1,\r\n        name:'Aman Jain',\r\n        email:'amanjain@gamil.com'\r\n    },\r\n    {\r\n        id:2,\r\n        name:'Nicey Jain',\r\n        email:'niceyjain@gamil.com'\r\n    },\r\n    {\r\n        id:3,\r\n        name:'Aasth Jain',\r\n        email:'aasthajain@gamil.com'\r\n    },\r\n    {\r\n        id:4,\r\n        name:'Dilip Jain',\r\n        email:'dilipjain@gamil.com'\r\n    },\r\n    {\r\n        id:5,\r\n        name:'Sarika Jain',\r\n        email:'sarikajain@gamil.com'\r\n    },\r\n    {\r\n        id:6,\r\n        name:'John Jain',\r\n        email:'johnjain@gamil.com'\r\n    },\r\n    {\r\n        id:7,\r\n        name:'Andrew Math',\r\n        email:'andrewmath@gamil.com'\r\n    },\r\n    {\r\n        id:8,\r\n        name:'Angel Rai',\r\n        email:'angelerai@gamil.com'\r\n    },\r\n    {\r\n        id:9,\r\n        name:'Rob perci',\r\n        email:'robperci@gamil.com'\r\n    },\r\n    {\r\n        id:10,\r\n        name:'Mathew brock',\r\n        email:'mathewbrock@gamil.com'\r\n    },\r\n    {\r\n        id:11,\r\n        name:'Nick jonas',\r\n        email:'nickjonas@gamil.com'\r\n    },\r\n    {\r\n        id:12,\r\n        name:'Nick Fury',\r\n        email:'ncikfury@gamil.com'\r\n    },\r\n    {\r\n        id:13,\r\n        name:'Tony Stark',\r\n        email:'tonystark@gamil.com'\r\n    },\r\n    {\r\n        id:14,\r\n        name:'Bruce banner',\r\n        email:'brucebanner@gamil.com'\r\n    },\r\n    {\r\n        id:15,\r\n        name:'Natasha',\r\n        email:'natasha@gamil.com'\r\n    }\r\n]\r\n","import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = ({SearchChange})=>{\r\n    return(\r\n        <div>\r\n            <input \r\n            className=\"search\"\r\n            type=\"search\"\r\n            placeholder=\"search robots\"\r\n            onChange={SearchChange}\r\n            ></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport CardList from './CardList'\r\nimport {Users} from './Users';\r\nimport SearchBox from './SearchBox';\r\nimport './App.css';\r\n\r\nclass App extends React.Component{\r\n    \r\n    constructor(){\r\n        super()\r\n        this.state ={\r\n            robots:Users,\r\n            SearchItem:\"\"\r\n        }\r\n    }\r\n    onSearchChange = (event)=>{\r\n        this.setState({ SearchItem:event.target.value });\r\n\r\n    }\r\n    render(){\r\n        const filterRobo = this.state.robots.filter(robo => {\r\n            return robo.name.toLowerCase().trim().includes(this.state.SearchItem.toLowerCase().trim())\r\n        })\r\n\r\n        return(\r\n            <div className=\"container\">\r\n                <h1>ROBOFRIENDS</h1>\r\n                <SearchBox SearchChange={this.onSearchChange}/>\r\n                <CardList Users={filterRobo}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider , conect} from 'react-redux';\nimport {createStore} from 'redux';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n// import Card from './Card';\n// import {Users} from './Users';\n// import CardList from './CardList';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}